# Begin of wordpress/frontend-connector.py
# version 1.0.4
import base64
import requests
import re
import json
from loguru import logger
from config import Config
from typing import Dict, List, Optional, Union, Any
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type

class WordPressAPIError(Exception):
    """Exception raised for WordPress API errors."""
    pass

class WordPressConnector:
    """Connector for WordPress REST API."""
    
    def __init__(self):
        """Initialize the WordPress connector."""
        self.api_url = f"{Config.WP_URL}/wp-json/wp/v2"
        self.custom_api_url = f"{Config.WP_URL}/wp-json/vaysf/v1"
        self.total_participants = 0
        self.total_participant_pages = 0
    
        # Create a session to maintain cookies
        self.session = requests.Session()
        
        # Set up headers
        self.session.headers.update({
            "X-VAYSF-API-Key": Config.WP_API_KEY,
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Accept": "application/json",
            "Origin": Config.WP_URL,
            "Referer": Config.WP_URL
        })
        
        # Initialize the session
        self._initialize_session()
     
    def _initialize_session(self):
        """Initialize session with cookies by visiting the main site."""
        logger.info("Initializing session with WordPress...")
        try:
            # First visit the main site to get any cookies
            main_response = self.session.get(Config.WP_URL)
            
            # Check if we need to handle a bot protection cookie
            if "humans_" in main_response.text:
                logger.info("Detected bot protection. Extracting cookie...")
                # Try to extract the cookie script
                cookie_match = re.search(r'document\.cookie\s*=\s*"([^"]+)"', main_response.text)
                if cookie_match:
                    cookie_script = cookie_match.group(1)
                    cookie_name, cookie_value = cookie_script.split('=')
                    self.session.cookies.set(cookie_name, cookie_value)
                    
                    # Visit the site again with the cookie
                    second_response = self.session.get(Config.WP_URL)
                    logger.info(f"Second site visit status code: {second_response.status_code}")
            
            logger.info(f"WordPress session initialized with cookies: {dict(self.session.cookies)}")
        except Exception as e:
            logger.error(f"Failed to initialize WordPress session: {e}")
        
    def get_churches(self) -> List[Dict[str, Any]]:
        """
        Get churches from WordPress.
        
        Returns:
            List of church records
        """
        try:
            response = self.session.get(f"{self.custom_api_url}/churches")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to get churches: {str(e)}")
            return []
        
    def create_church(self, church_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Create a church record in WordPress.
        
        Args:
            church_data: Church data
            
        Returns:
            Created church record or None if failed
        """
        try:
            response = self.session.post(
                f"{self.custom_api_url}/churches",
                json=church_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to create church: {str(e)}")
            return None
    
    def update_church(self, church_id: int, church_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Update a church record in WordPress.
        
        Args:
            church_id: The church ID
            church_data: Updated church data
            
        Returns:
            Updated church record or None if failed
        """
        try:
            response = self.session.put(
                f"{self.custom_api_url}/churches/{church_id}",
                json=church_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to update church {church_id}: {str(e)}")
            return None

    def update_church_by_code(self, church_code: str, church_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Update a church record in WordPress using its code.
        
        Args:
            church_code: The church code (3-letter code)
            church_data: Updated church data
            
        Returns:
            Updated church record or None if failed
        """
        try:
            response = self.session.put(
                f"{self.custom_api_url}/churches/{church_code}",
                json=church_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to update church with code {church_code}: {str(e)}")
            return None
    
    def get_church_by_code(self, church_code: str) -> Optional[Dict[str, Any]]:
        """
        Get a specific church by its church_code from WordPress.
        
        Args:
            church_code: The church code (3-letter code)
        
        Returns:
            Church record or None if not found
        """
        try:
            response = self.session.get(f"{self.custom_api_url}/churches/{church_code}")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to get church with code {church_code}: {str(e)}")
            return None
 
    """ Add the @retry()... timeout=(5, 30)... raise #to retry decorator as a reminder for foolproof code later on """
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10), retry=retry_if_exception_type(requests.RequestException))
    def get_participants(self, params: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """
        Get participants from WordPress with pagination support.
        
        Args:
            params: Query parameters including pagination (page, per_page)
                
        Returns:
            List of participant records for the requested page
        """
        params = params or {}
        if 'page' not in params:
            params['page'] = 1
        if 'per_page' not in params:
            params['per_page'] = 50  # Default to 50 per page

        try:
            response = self.session.get(f"{self.custom_api_url}/participants", params=params, timeout=(5, 30))
            response.raise_for_status()

            # Store pagination metadata in the instance for future reference
            if 'X-WP-Total' in response.headers:
                self.total_participants = int(response.headers['X-WP-Total'])
            if 'X-WP-TotalPages' in response.headers:
                self.total_participant_pages = int(response.headers['X-WP-TotalPages'])

            return response.json()

        except requests.RequestException as e:
            logger.error(f"Failed to get participants: {str(e)}")
            raise  # Let the retry decorator handle retries

    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10), retry=retry_if_exception_type(requests.RequestException))
    def get_participants(self, params: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """
        Get participants from WordPress with pagination support.
        
        Args:
            params: Query parameters including pagination (page, per_page)
                
        Returns:
            List of participant records for the requested page
        """
        params = params or {}
        chmeetings_id = params.pop('chmeetings_id', None)  # Extract chmeetings_id if present
        
        if 'page' not in params:
            params['page'] = 1
        if 'per_page' not in params:
            params['per_page'] = 50  # Default to 50 per page

        try:
            response = self.session.get(f"{self.custom_api_url}/participants", params=params, timeout=(5, 30))
            response.raise_for_status()

            # Store pagination metadata in the instance for future reference
            if 'X-WP-Total' in response.headers:
                self.total_participants = int(response.headers['X-WP-Total'])
            if 'X-WP-TotalPages' in response.headers:
                self.total_participant_pages = int(response.headers['X-WP-TotalPages'])

            results = response.json()
            
            # Filter by chmeetings_id in Python if that parameter was provided
            if chmeetings_id is not None:
                results = [p for p in results if p.get('chmeetings_id') == chmeetings_id]
                
            return results

        except requests.RequestException as e:
            logger.error(f"Failed to get participants: {str(e)}")
            raise  # Let the retry decorator handle retries
    
    def create_participant(self, participant_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Create a participant record in WordPress.
        
        Args:
            participant_data: Participant data
            
        Returns:
            Created participant record or None if failed
        """
        try:
            response = self.session.post(
                f"{self.custom_api_url}/participants",
                json=participant_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to create participant: {str(e)}")
            return None
    
    def update_participant(self, participant_id: int, participant_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Update a participant record in WordPress.
        
        Args:
            participant_id: The participant ID
            participant_data: Updated participant data
            
        Returns:
            Updated participant record or None if failed
        """
        try:
            response = self.session.put(
                f"{self.custom_api_url}/participants/{participant_id}",
                json=participant_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to update participant {participant_id}: {str(e)}")
            return None

    def get_rosters(self, params: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """Get rosters from WordPress."""
        try:
            response = self.session.get(
                f"{self.custom_api_url}/rosters",
                params=params
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to get rosters: {str(e)}")
            return []

    def create_roster(self, roster_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Create a roster record in WordPress."""
        try:
            response = self.session.post(
                f"{self.custom_api_url}/rosters",
                json=roster_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to create roster: {str(e)}")
            return None

    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10), retry=retry_if_exception_type(requests.RequestException))
    def delete_roster(self, roster_id: int) -> bool:
        """
        Delete a roster entry from sf_rosters by its ID.

        Args:
            roster_id (int): The ID of the roster entry to delete.

        Returns:
            bool: True if deletion was successful, False otherwise.
        """
        try:
            response = self.session.delete(
                f"{self.custom_api_url}/rosters/{roster_id}"
            )
            response.raise_for_status()
            logger.info(f"Successfully deleted roster with ID {roster_id}")
            return True
        except requests.RequestException as e:
            logger.error(f"Failed to delete roster {roster_id}: {str(e)}")
            return False
    
    def create_approval(self, approval_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Create an approval record in WordPress.
        
        Args:
            approval_data: Approval data
            
        Returns:
            Created approval record or None if failed
        """
        try:
            response = self.session.post(
                f"{self.custom_api_url}/approvals",
                json=approval_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to create approval: {str(e)}")
            return None
    
    def get_approvals(self, params: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """
        Get approvals from WordPress.
        
        Args:
            params: Query parameters
            
        Returns:
            List of approval records
        """
        try:
            response = self.session.get(
                f"{self.custom_api_url}/approvals",
                params=params
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to get approvals: {str(e)}")
            return []
    
    def update_approval(self, approval_id: int, approval_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Update an approval record in WordPress.
        
        Args:
            approval_id: The approval ID
            approval_data: Updated approval data
            
        Returns:
            Updated approval record or None if failed
        """
        try:
            response = self.session.put(
                f"{self.custom_api_url}/approvals/{approval_id}",
                json=approval_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to update approval {approval_id}: {str(e)}")
            return None
    
    def create_validation_issue(self, issue_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Create a validation issue record in WordPress.
        
        Args:
            issue_data: Validation issue data
            
        Returns:
            Created validation issue record or None if failed
        """
        try:
            response = self.session.post(
                f"{self.custom_api_url}/validation-issues",
                json=issue_data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to create validation issue: {str(e)}")
            return None
    
    def get_validation_issues(self, params: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """
        Get validation issues from WordPress.
        
        Args:
            params: Query parameters
            
        Returns:
            List of validation issue records
        """
        try:
            response = self.session.get(
                f"{self.custom_api_url}/validation-issues",
                params=params
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to get validation issues: {str(e)}")
            return []

    def send_email(self, to, subject, message, from_email=None, cc=None, bcc=None):
        """
        Send an email using the WordPress REST API.
        
        Args:
            to (str): Recipient email address
            subject (str): Email subject
            message (str): Email message (HTML supported)
            from_email (str, optional): Sender email address
            cc (list, optional): List of CC recipients
            bcc (list, optional): List of BCC recipients
            
        Returns:
            dict: Response from the API
        """
        try:
            data = {
                'to': to,
                'subject': subject,
                'message': message
            }
            
            # Add optional parameters if provided
            if from_email:
                data['from'] = from_email
            
            if cc:
                data['cc'] = cc
                
            if bcc:
                data['bcc'] = bcc
            
            response = self.session.post(
                f"{self.custom_api_url}/send-email",
                json=data
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to send email: {str(e)}")
            return {"success": False, "message": str(e)}
    
    def close(self):
        """Close connections and clean up resources."""
        self.session.close()

    def __enter__(self):
        """Context manager entry point."""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit point."""
        self.close()